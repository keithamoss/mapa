import glob
import hashlib
import json
import os

FONTAWESOME_ICONS = "./font-awesome/pro/icon-families-processed-v2.json"
FONTAWESOME_CATEGORIES = "./font-awesome/pro/categories-processed-v2.json"

FLATICON_ICONS = "./flaticon/flaticon-processed.json"
FLATICON_CATEGORIES = "./flaticon/flaticon-categories-processed.json"

LIBRARY_CONFIG_OUTPUT_JSON = "./icons-library-config.json"
PUBLIC_ASSETS_PATH_RELATIVE = "../../../public/icons-library/"
ICONS_OUTPUT_JSON = "icons-library.{hash}.json"
CATEGORIES_OUTPUT_JSON = "icons-categories-library.{hash}.json"
CATEGORIES_OUTPUT_TYPESCRIPT = "icons-categories-library.ts"

# Only one version of the assets at a time, please
files = glob.glob(f"{PUBLIC_ASSETS_PATH_RELATIVE}*.json")
for f in files:
    os.remove(f)

# ######################
# Icons
# ######################
icons = {}
for icon_file in [FONTAWESOME_ICONS, FLATICON_ICONS]:
  with open(icon_file, "r") as f:
      fileJSON = json.load(f)
      for icon_name, icon in fileJSON.items():
          if icon_name in icons:
              raise Exception(f"{icon_name} already exists in the library!")
          
      icons |= fileJSON

icons_json_filename = ICONS_OUTPUT_JSON.format(hash=hashlib.shake_256(json.dumps(icons).encode('utf-8')).hexdigest(4))
with open(os.path.join(PUBLIC_ASSETS_PATH_RELATIVE, icons_json_filename), "w") as f:
    json.dump(icons, f, indent=4)

# ######################
# Categories
# ######################
categories = {}
for category_file in [FONTAWESOME_CATEGORIES, FLATICON_CATEGORIES]:
  with open(category_file, "r") as f:
      fileJSON = json.load(f)
      for category_name, category in fileJSON.items():
          if category_name in categories:
              raise Exception(f"{category_name} already exists in the library!")
          
      categories |= fileJSON

for category_name, category in categories.items():
    categories[category_name]["icons"] = sorted(categories[category_name]["icons"])

categories_sorted = dict(sorted(categories.items()))
categories_json_filename = CATEGORIES_OUTPUT_JSON.format(hash=hashlib.shake_256(json.dumps(categories_sorted).encode('utf-8')).hexdigest(4))
with open(os.path.join(PUBLIC_ASSETS_PATH_RELATIVE, categories_json_filename), "w") as f:
    json.dump(categories_sorted, f, indent=4)

with open(CATEGORIES_OUTPUT_TYPESCRIPT, "w") as f:
    f.write(f"""// WARNING: This file is automatically generated by the Icons Library Python scripts.
// DO NOT modify this directly.

export type FontAwesomeCategory =
\t| '{"'\n\t| '".join(categories_sorted.keys())}';
""")

# ######################
# Config File
# ######################
with open(LIBRARY_CONFIG_OUTPUT_JSON, "w") as f:
    json.dump({
        "icons": icons_json_filename,
        "categories": categories_json_filename
    }, f, indent=4)