import { createSelector, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { Coordinate } from "ol/coordinate";
import { authApi } from "../../app/services/auth";
import { RootState } from "../../app/store";
import { selectMapsResult } from "../maps/mapsSlice";

export interface OLMapView {
  center: Coordinate;
  zoom: number;
  resolution: number;
}

export interface AppState {
  mapId: number | undefined;
  mapView: Partial<OLMapView> | undefined;
  selectedFeatures: number[];
  value: number;
  status: "idle" | "loading" | "failed";
}

const initialState: AppState = {
  mapId: undefined,
  mapView: undefined,
  selectedFeatures: [],
  value: 0,
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   "counter/fetchCount",
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const appSlice = createSlice({
  name: "app",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // Use the PayloadAction type to declare the contents of `action.payload`
    setActiveMapId: (state, action: PayloadAction<number>) => {
      state.mapId = action.payload;
    },
    setMapView: (state, action: PayloadAction<Partial<OLMapView>>) => {
      state.mapView = action.payload;
    },
    setSelectedFeatures: (state, action: PayloadAction<number[]>) => {
      state.selectedFeatures = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addMatcher(
        authApi.endpoints.checkLoginStatus.matchFulfilled,
        (state, action) => {
          if (action.payload.user?.settings.last_map_id !== undefined) {
            state.mapId = action.payload.user?.settings.last_map_id;
          }
        }
      )
      .addMatcher(
        authApi.endpoints.updateUserProfile.matchFulfilled,
        (state, action) => {
          if (action.payload.last_map_id !== undefined) {
            state.mapId = action.payload.last_map_id;
          }
        }
      );
  },
});

export const { setActiveMapId, setMapView, setSelectedFeatures } =
  appSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectMapView = (state: RootState) => state.app.mapView;

export const selectActiveMapId = (state: RootState) => state.app.mapId;

export const getSelectedFeatureIds = (state: RootState) =>
  state.app.selectedFeatures;

export const selectActiveMap = createSelector(
  selectActiveMapId,
  selectMapsResult,
  (mapId, maps) =>
    mapId !== undefined ? maps.data?.entities[mapId] : undefined
);

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default appSlice.reducer;
