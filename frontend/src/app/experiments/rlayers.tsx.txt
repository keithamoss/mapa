import GeoJSON from "ol/format/GeoJSON";
import "ol/ol.css";
import { toLonLat } from "ol/proj";

import React from "react";
import "rlayers/control/layers.css";
import "./Map.css";

import { Circle, Fill, Stroke } from "ol/style";
import Style from "ol/style/Style";
import { RFeature, RLayerVector, RMap, ROSM, RStyle } from "rlayers";
import { useGetMapFeaturesQuery } from "../../features/map_features/map_features";

// const origin = fromLonLat([2.364, 48.82]);

export default function ExternalState(props: any): JSX.Element {
  //   const [view, setView] = React.useState<RView>({ center: origin, zoom: 11 });
  const { view, setView, geojsonFeatures } = props;
  console.log("map.geojsonFeatures", geojsonFeatures);

  const { data: features } = useGetMapFeaturesQuery();
  console.log("rlayers.features", features);

  const olStyleFunction = (
    feature: any,
    resolution: number,
    mapFilterOptions: any
  ) => {
    // console.log("style.feature", feature);
    const stroke = new Stroke({ color: "black", width: 2 });
    const fill = new Fill({ color: "red" });

    // return new Style({
    //   image: new RegularShape({
    //     fill: fill,
    //     stroke: stroke,
    //     points: 4,
    //     radius: 10,
    //     angle: Math.PI / 4,
    //   }),
    // });

    return new Style({
      image: new Circle({
        fill: fill,
        radius: 10,
      }),
    });
  };

  //   console.log(`Rendering RMap with ${geojsonFeatures2.features.length}`);

  return (
    <React.Fragment>
      <div className="map-container">
        <RMap
          className="example-map"
          initial={view}
          view={[view, setView]}
          //   onClick={useCallback(
          //     (e: MapBrowserEvent<UIEvent>) => {
          //       // const coords = e.map.getCoordinateFromPixel(e.pixel);
          //       // const lonlat = toLonLat(coords);
          //       //   console.log("lonlat", lonlat);

          //       console.log("layers", e.map.getAllLayers());

          //       const source = e.map
          //         .getAllLayers()[1]
          //         .getSource() as VectorSource;
          //       console.log("getFeatures", source.getFeatures());

          //       // const feature = new Feature({
          //       //   geometry: new Point([-31.9523, 115.8613]),
          //       //   name: "My Point",
          //       // });
          //       // console.log("feature", feature);
          //       //   source.addFeature(feature);

          //       console.log("foobar.geojsonFeatures", geojsonFeatures);
          //     },
          //     [geojsonFeatures]
          //   )}
        >
          <ROSM />

          {React.useMemo(() => {
            if (features !== undefined && features.length) {
              console.log("rlayers.make layer");

              const geojsonFeatures2 = {
                type: "FeatureCollection",
                features:
                  features !== undefined
                    ? features?.map((feature) => {
                        return {
                          id: feature.id,
                          type: "Feature",
                          properties: {
                            id: feature.id,
                            name: feature.name,
                          },
                          geometry: {
                            type: "Point",
                            coordinates: feature.geom.coordinates,
                          },
                        };
                      })
                    : [],
              };

              const format = new GeoJSON({
                dataProjection: "EPSG:4326",
                featureProjection: "EPSG:3857",
              });
              const myFeatures = format.readFeatures(geojsonFeatures2);
              console.log("map.myFeatures", myFeatures);

              const styleFunction = (feature: any, resolution: number) =>
                olStyleFunction(feature, resolution, []);

              return (
                <RLayerVector
                  zIndex={1000}
                  //   features={myFeatures}
                  // format={format}
                  style={styleFunction}
                  // onAddFeature={useCallback((e: any) => {
                  //   console.log("foo.e", e);
                  // }, [])}
                >
                  {/* <RStyle.RStyle> */}
                  {/* <RStyle.RCircle radius={5}>
                      <RStyle.RFill color="#ff0000" />
                                </RStyle.RCircle> */}

                  {/* <RStyle.RRegularShape radius={5} points={4} angle={0.3}>
                      <RStyle.RFill color="#ff0000" />
                      <RStyle.RStroke color="#ff0000" width={2} />
                    </RStyle.RRegularShape>
                  </RStyle.RStyle> */}
                  {myFeatures.map((feature: any) => (
                    <RFeature
                      key={feature.getProperties()["id"]}
                      geometry={feature.getGeometry()}
                    >
                      <RStyle.RStyle>
                        <RStyle.RCircle radius={10}>
                          <RStyle.RFill color="#ff0000" />
                        </RStyle.RCircle>
                      </RStyle.RStyle>
                    </RFeature>
                  ))}
                </RLayerVector>
              );
            }

            return <React.Fragment />;
          }, [features])}
        </RMap>
        <div id="center"></div>
      </div>

      <div className="mx-0 mt-0 mb-3 p-1 w-100 jumbotron shadow d-flex flex-row justify-content-between">
        <div>
          Center is at
          <strong className="mx-1">
            {`${toLonLat(view.center)[1].toFixed(3)}° :
                    ${toLonLat(view.center)[0].toFixed(3)}°`}
          </strong>
        </div>
        <div>
          Zoom level is{" "}
          <strong className="mx-1">{Math.round(view.zoom)}</strong>
        </div>
        <div>
          Resolution is
          <strong className="mx-1">
            {view.resolution && view.resolution.toFixed(2)}m/pixel
          </strong>
        </div>
      </div>
    </React.Fragment>
  );
}
