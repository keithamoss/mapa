import { useEffect, useRef, useState } from "react";

import TileLayer from "ol/layer/Tile";
import VectorLayer from "ol/layer/Vector";
import Map from "ol/Map";
import VectorSource from "ol/source/Vector";
import XYZ from "ol/source/XYZ";
import View from "ol/View";

import "./Map.css";

function MapWrapper2(props: any) {
  // set intial state
  const [map, setMap] = useState<any>();
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [featuresLayer, setFeaturesLayer] = useState<any>();
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [selectedCoord, setSelectedCoord] = useState();
  console.log("MapWrapper2.foobar");

  // pull refs
  const mapElement = useRef<any>();

  // create state ref that can be accessed in OpenLayers onclick callback function
  //  https://stackoverflow.com/a/60643670
  const mapRef = useRef();
  mapRef.current = map;

  // initialize map on first render - logic formerly put into componentDidMount
  useEffect(() => {
    console.log("MapWrapper2.useEffect");
    // create and add vector source layer
    const initalFeaturesLayer = new VectorLayer({
      source: new VectorSource(),
    });

    console.log("MapWrapper2.mapRef", mapRef);
    console.log("MapWrapper2.map", map);
    if (map !== null && map !== undefined) {
      // console.log("MapWrapper2.destroy.mapElement", mapElement);
      // console.log("MapWrapper2.destroy.mapRef", mapRef);
      console.log("MapWrapper2.destroy.map", map);
      map.setTarget(null);
    }

    // create map
    const initialMap = new Map({
      target: mapElement.current,
      layers: [
        // USGS Topo
        new TileLayer({
          source: new XYZ({
            url: "https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}",
          }),
        }),

        // Google Maps Terrain
        /* new TileLayer({
          source: new XYZ({
            url: 'http://mt0.google.com/vt/lyrs=p&hl=en&x={x}&y={y}&z={z}',
          })
        }), */

        initalFeaturesLayer,
      ],
      view: new View({
        projection: "EPSG:3857",
        center: [0, 0],
        zoom: 2,
      }),
      controls: [],
    });

    // // set map onclick handler
    // initialMap.on("click", handleMapClick);

    // save map and vector layer references to state
    setMap(initialMap);
    setFeaturesLayer(initalFeaturesLayer);
  }, []);

  // update map if features prop changes - logic formerly put into componentDidUpdate
  //   useEffect(() => {
  //     if (props.features.length) {
  //       // may be null on first render

  //       // set features to map
  //       featuresLayer.setSource(
  //         new VectorSource({
  //           features: props.features, // make sure features is an array
  //         })
  //       );

  //       // fit map to feature extent (with 100px of padding)
  //       map.getView().fit(featuresLayer.getSource().getExtent(), {
  //         padding: [100, 100, 100, 100],
  //       });
  //     }
  //   }, [props.features]);

  // map click handler
  //   const handleMapClick = (event) => {
  //     // get clicked coordinate using mapRef to access current React state inside OpenLayers callback
  //     //  https://stackoverflow.com/a/60643670
  //     const clickedCoord = mapRef.current.getCoordinateFromPixel(event.pixel);

  //     // transform coord to EPSG 4326 standard Lat Long
  //     const transormedCoord = transform(clickedCoord, "EPSG:3857", "EPSG:4326");

  //     // set React state
  //     setSelectedCoord(transormedCoord);
  //   };

  // render component
  return <div ref={mapElement} className="map-container"></div>;
  //   return (
  //     <div>

  //       {/* <div className="clicked-coord-label">
  //         <p>{selectedCoord ? toStringXY(selectedCoord, 5) : ""}</p>
  //       </div> */}
  //     </div>
  //   );
}

export default MapWrapper2;
